plot<-ggplot(df.melt, aes(x=variable, y=value, aes=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(df.melt, aes(x=variable, y=value, group=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(df.melt, aes(x=variable, y=value, group=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(df.melt, aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(!is.na(df.melt), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
plot<-ggplot(df.melt[which(df$interventcond != NA),], aes(x=variable, y=value, group=interventcond, color=interventcond))
plot<-ggplot(df.melt[which(df.melt$stereotyped != NA),], aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(subset(df.melt$stereotyped != NA), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot<-ggplot(subset(df.melt, df.melt$stereotyped != NA), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplot(subset(df.melt, df.melt$stereotyped == NA), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
plot<-ggplotna.omit(df.melt), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=interventcond, color=interventcond))
plot+stat_smooth(method='glm')+
facet_wrap(~stereotyped)
?update
?lmer
library(lme4)
?lmer
head(df.melt$variable-1)
head(df.melt)
fm1 <- lmer(value ~ variable + (variable | subjectnum))
fm1 <- lmer(value ~ variable + (variable | subjectnum), df.melt)
table(subjectnum)
table(df.meltsubjectnum)
table(df.melt$subjectnum)
table#df.melt$variable
table(df.melt$variable)
table(df.melt$stereotyped)
fm1 <- lmer(value ~ variable + (variable | factor(subjectnum)), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ variable + (variable | subjectnum), df.melt)
str(df.melt$subjectnum)
fm1 <- lmer(value ~ variable + (1 | subjectnum), df.melt)
head(df.melt)
fm2 <- update(fm1 .~. + interventcond)
fm2 <- update(fm1, .~. + interventcond)
fm3 <- update(fm2, .~. + stereotyped)
anova(fm1, fm2)
anova(fm1, fm3)
anova(fm2, fm3)
anova(fm1, fm3)
fm4 <- update(fm3, .~variable*interventcond*stereotyped)
fm4 <- update(fm3, .~variable*interventcond*stereotyped + (1 | subjectnum))
anova(fm3, fm4)
fm5 <- lm(value ~ variable + interventcond + stereotyped, data=df.melt)
fm5
summary(fm5)
fm5
names(fm5)
fm5$contrasts
fm5$effects
summary(fm5)
df.melt$testnum <- as.numeric(df.melt$variable)
table(df.melt$testnum, df.melt$variable)
df.melt$subjectnum <- factor(df.melt$subjectnum)-1
df.melt$testnum <- as.numeric(df.melt$variable)-1
table(df.melt$testnum, df.melt$variable)
df.melt$testnum <- as.numeric(df.melt$variable)
fm5 <- lm(value ~ testnum + interventcond + stereotyped, data=df.melt)
fm5
summary(fm5)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum +  (testnum | subjectnum), df.melt)
fm1 <- lmer(value ~ testnum + (testnum | subjectnum), df.melt)
fm1 <- lmer(value ~ testnum + (testnum|subjectnum), df.melt)
fm5 <- lm(value ~ testnum + interventcond + stereotyped, data=df.melt)
fm5
summary(fm5)
fm1 <- lmer(value ~ testnum-1 + (testnum-1|subjectnum), df.melt)
fm1 <- lmer(value ~ testnum + (1|subjectnum), df.melt)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum + (1|subjectnum), df.melt)
str(subjectnum)
str(df.melt$subjectnum)
df.melt <- melt(df, id.vars = c('subjectnum', 'interventcond', 'stereotyped'), measure.vars=c('test1numCorrectofAnswer', 'test2numCorrectofAnswer', 'test3numCorrectofAnswer'))
levels(df.melt$variable) <- c('test1', 'test2', 'test3')
df.melt$testnum <- as.numeric(df.melt$variable)
df.melt$subjectnum <- factor(df.melt$subjectnum)
fm1 <- lmer(value ~ testnum + (testnum|subjectnum), df.melt)
fm1
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum, color=subjectnum))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum, color=interventcond))
plot+geom_line()+
facet_wrap(~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum))
plot+geom_line()+
facet_wrap(interventcond~stereotyped)
plot<-ggplot(na.omit(df.melt), aes(x=variable, y=value, group=subjectnum))
plot+geom_line()+
facet_grid(interventcond~stereotyped)
fullmodel <- lmer(value ~ testnum*steretyped*interventcond + (testnum|subjectnum), df.melt)
fullmodel <- lmer(value ~ testnum*stereotyped*interventcond + (testnum|subjectnum), df.melt)
fm2 <- update(fmullmodel, .~ testnum*stereotyped + testnum*interventcond + (testnum|subjectnum), df.melt)
fm2 <- update(fullmodel, .~ testnum*stereotyped + testnum*interventcond + (testnum|subjectnum), df.melt)
anova(fullmodel, fm2)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond (testnum | subjectnum), df.melt)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond + (testnum | subjectnum), df.melt)
anova(fullmodel, fm4)
plot(fullmodel)
plot(fm2)
plot(fm3)
plot(fm4)
plot(fm5)
fm4 <- update(fullmodel, .~ testnum + stereotyped + interventcond + (testnum | subjectnum), df.melt)
plot(fm4)
plot(fullmodel)
fullmodel
summary(fullmodel)
MCMCglmm(fullmodel)
mcmcsamp(fullmodel)
library(mcmcglmm)
library('mcmcglmm')
library('MCMCglmm')
install.packages('MCMCglmm')
?MCMCglmm
library(MCMCglmm)
MCMCglmm(fullmodel)
lme4
?lme4
version(lme4)
version()
r.version()
bootmer(fullmodel)
bootMer(fullmodel)
fun <- function(fit){return(fixef(fit))}
bootMer(fullmodel, fun)
help("simulate-mer")
?simulate-mer
?simulatemer
a<-bootMer(fullmodel, fun, sim=1000)
a<-bootMer(fullmodel, fun, nsim = 1000)
summary(a)
names(a)
a[1]
a[2]
summary(a[2])
hist(a[2])
hist(a[2]$t)
hist(a[3])
summary(a[3])
getwd()
setwd('Documents/Gits')
library("colorfulVennPlot", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
detach("package:colorfulVennPlot", unload=TRUE)
install('colorfulVennPlot')
library(devtools)
library(roxygen2)
install(colorfulVennPlot)
getwd()
setwd('colorfulVennPlot/')
document()
setwd('..')
install('colorfulVennPlot')
plotVenn2d(c(10,10,10), printvals = F)
?plotVenn2d
library(plotly)
install.packages('plotly')
library('devtools')
install_github('ropensci/plotly')
library(plotly)
py <- plotly()
trace0 <- list(
x=c(1, 2, 3, 4),
y=c(10, 15, 13, 17)
)
trace1 <- list(
x=c(1, 2, 3, 4),
y=c(16, 5, 11, 9)
)
response <- py$plotly(trace0, trace1, kwargs=list(filename=basic-line, fileopt='overwrite'))
py <- plotly()
set_credentials_file("triddle", "lsjrbob3nl")
py <- plotly()
trace0 <- list(
x=c(1, 2, 3, 4),
y=c(10, 15, 13, 17)
)
trace1 <- list(
x=c(1, 2, 3, 4),
y=c(16, 5, 11, 9)
)
response <- py$plotly(trace0, trace1, kwargs=list(filename=basic-line, fileopt='overwrite'))
response <- py$plotly(trace0, trace1, kwargs=list(filename='basic-line', fileopt='overwrite'))
response$url
library(plotly)
shinyServer(function(input, output) {
output$plot <- renderUI({
df <- df[df$G>input$games,]
p <- ggplot(df[df$G>input$games,], aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
py <- plotly(triddle, lsjrbob3nl, 'https://plot.ly')
res <- py$ggplotly(p, kwargs=list(filename='Runs',
fileopt='overwrite',
auto_open=F))
})
})
inputPanel(
sliderInput('games', label="Minimum Number of Games Played:",
min=1, max=162, value=150, step=1)
)
renderPlot({
p<-ggplot(df[df$G>input$games,], aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
print(p)
})
library(shiny)
library(shiny)
inputPanel(
sliderInput('games', label="Minimum Number of Games Played:",
min=1, max=162, value=150, step=1)
)
renderPlot({
p<-ggplot(df[df$G>input$games,], aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
print(p)
})
inputPanel(
sliderInput('games', label="Minimum Number of Games Played:",
min=1, max=162, value=150, step=1),
mainPanel(
htmlOutput('plot')
)
)
library(plotly)
shinyServer(function(input, output) {
output$plot <- renderUI({
df <- df[df$G>input$games,]
p <- ggplot(df[df$G>input$games,], aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
py <- plotly(triddle, lsjrbob3nl, 'https://plot.ly')
res <- py$ggplotly(p, kwargs=list(filename='Runs',
fileopt='overwrite',
auto_open=F))
})
})
res$url
library(shiny)
inputPanel(
sliderInput('games', label="Minimum Number of Games Played:",
min=1, max=162, value=150, step=1),
mainPanel(
htmlOutput('plot')
)
)
library(plotly)
shinyServer(function(input, output) {
output$plot <- renderUI({
df <- df[df$G>input$games,]
p <- ggplot(df[df$G>input$games,], aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
py <- plotly(triddle, lsjrbob3nl, 'https://plot.ly')
res <- py$ggplotly(p, kwargs=list(filename='Runs',
fileopt='overwrite',
auto_open=F))
})
})
renderPlot({
p<-ggplot(df[df$G>input$games,], aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
print(p)
})
renderPlot
print(p)
?sort
?order
?sort
shinyUI(
pageWithSidebar(
headerPanel(title=HTML('Runs scored'), windowTitle='Runs Scored'),
sidebarPanel(
sliderInput('games', label="Minimum Number of Games Played:",
min=1, max=162, value=150, step=1),
),
mainPanel(
htmlOutput('plot')
)
)
shinyServer(function(input, output) {
output$plot <- renderUI({
df_sub <- df[df$G>input$games,]
p <- ggplot(df_sub, aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
py <- plotly(triddle, lsjrbob3nl, 'https://plot.ly')
res <- py$ggplotly(p, kwargs=list(filename='Runs',
fileopt='overwrite',
auto_open=F))
tags$iframe(src=res$response$url,
frameBorder='0')
})
})
shinyServer(function(input, output) {
output$plot <- renderUI({
df_sub <- df[df$G>input$games,]
p <- ggplot(df_sub, aes(x=R)) +
geom_histogram(binwidth=1, fill="#144256") +
ylab('Count') + xlab('Runs') +
theme_bw()
py <- plotly(triddle, lsjrbob3nl, 'https://plot.ly')
res <- py$ggplotly(p, kwargs=list(filename='Runs',
fileopt='overwrite',
auto_open=F))
tags$iframe(src=res$response$url,
frameBorder='0')
})
})
runApp()
getwd()
setwd('riddlet.github.io/_drafts/_knitr')
runApp()
runApp()
iris
setwd("~/Documents/Gits/riddlet.github.io/_drafts/_knitr")
menus<-read.csv('../Data/menustat-546cf6b433804.csv')
menus<-read.csv('../Data/menustat-546cf6b433804.csv')
names(menus)
source('~/.active-rstudio-document', echo=TRUE)
head(menus)
str(menus)
summary(menus)
?sample
sample(menus[menus$Calories.2014 == '\t-',], 10)
sample(menus[menus$Calories.2014 == '\t-',1:10], 10)
sample(menus[menus$Calories.2014 == '\t-',1:10], 5)
head(menus[menus$Calories.2014 == '\t-'])
head(menus[menus$Calories.2014 == '\t-', 1:5])
head(menus[menus$Calories.2014 == '\t-', 1:10])
head(menus[menus$Calories.2014 == '\t-', 1:15])
head(menus[menus$Calories.2014 == '\t-', 1:20])
head(menus[menus$Calories.2014 == '\t-', c(1:3, 10:20)])
head(menus[menus$Calories.2014 == '\t-', c(1:3, 15:20)])
str(menus)
menus[1:5,2]
menus[,3:51]<-as.character(menus[,3:51])
str(menus)
head(menus[menus$Calories.2014. == '\t-', c(1:3, 15:20)])
menus$Calories.2014.[1:10]
menus<-readLines('../Data/menustat-546cf6b433804.csv')
menus<-menus[-1]
menus<-read.csv(textConnection(menus)) #this takes a minute...
str(menus)
levels(menus$Trans.Fat..g..2012.)
head(menus)
menus == '\t-'
menus[menus=='\t']
head(menus)
menus[menus=='\t-']
menus[menus=='\t-']<-NA
head(menus)
str(menu)
str(menus)
menus.test<-as.character(menus[,3:51])
submenus<-menus[,3:51]
submenus<-lapply(menus, as.character)
submenus<-menus[,3:51]
submenus[]<-lapply(submenus, as.character)
str(submenus)
menus<-cbind(menus, submenus)
menus[,3:51]<submenus
menus[,3:51]<-submenus
str(menus)
table(menus$Restaurant)
levels(menus$Trans.Fat..g..2012.)
levels(menus$Trans.Fat..g..2012.)
menus<-readLines('../Data/menustat-546cf6b433804.csv')
menus[1:20]
?substr
?grep
menus<-sub('\t-', '')
menus<-sub('\t-', '', menus)
menus[1:20]
menus<-sub('\t-*', '', menus)
menus[1:20]
menus<-sub('\\t-*', '', menus)
menus[1:20]
menus<-sub('[\t-]', '', menus)
menus[1:20]
menus<-gsub('[\t-]', '', menus)
menus[1:20]
menus<-readLines('../Data/menustat-546cf6b433804.csv')
menus<-menus[-1]
menus[1:20]
menus<-gsub('\t-', '', menus)
menus[1:20]
menus<-read.csv(textConnection(menus)) #this takes a minute...
dim(menus)
str(menus)
menus<-gsub('\t', '', menus)
menus<-readLines('../Data/menustat-546cf6b433804.csv')
menus<-menus[-1]
menus<-gsub('\t-', '', menus)
menus<-gsub('\t', '', menus)
menus<-read.csv(textConnection(menus)) #this takes a minute...
str(menus)
table(menus$Restaurant.)
table(menus$Food.Category.)
table(menus$Item_Name.)
table(menus$Item.Description.2014.)
str(menus)
submenus<-menus[,3:51] #leave 'Restuarant', 'Food Category', and 'Menu Item ID' untouched.
submenus[]<-lapply(submenus, as.character)
menus[,3:51]<-submenus
str(menus)
menus$Servings.Per.Item.2012.[1:50]
menus$Servings.Per.Item.2014.[1:50]
menus$Servings.Per.Item.2013.[1:50]
menus$Servings.Per.Item.2013.[1:100]
menus$Servings.Per.Item.2013.[1:150]
menus$Servings.Per.Item.2013.[1:1000]
menus$Servings.Per.Item.2013.[1:1500]
menus$Serving.Size.2013.[1:250]
serving<-as.numeric(menus$Serving.Size.2013.)
hist(serving)
max(serving)
menus$Total.Fat..g..2014.[1:500]
as.numeric(menus$Total.Fat..g..2014.)
str(menus)
submenus<-menus[,c(7:16, 20:51]
submenus<-menus[,c(7:16, 20:51)]
submenus[]<-lapply(submenus, as.numeric)
16-7
51-20
menus[,c(7:16, 20:51)]<-submenus
str(menus)
hist(menus$Servings.Per.Item.2014.)
plot(menus$Carbohydrates..g..2014., menus$Calories.2014.)
plot(menus$Fiber., menus$Calories.2014.)
plot(menus$Fiber..g..2014., menus$Calories.2014.)
max(menus$Fiber..g..2014.)
lm(menus$Calories.2014.~ menus$Protein..g..2014.)
a<-lm(menus$Calories.2014.~ menus$Protein..g..2014.)
a<-lm(menus$Calories.2014.~ menus$Protein..g..2014., na.omit=T)
a<-lm(menus$Calories.2014.~ menus$Protein..g..2014., na.rm=T)
sum(is.na(menus$Calories.2014.))
is.na(menus$Calories.2014.)
str(menus$Calories.2014.)
str(menus)
menus<-readLines('../Data/menustat-546cf6b433804.csv')
menus<-menus[-1]
menus<-gsub('\t-', '', menus)
menus<-gsub('\t', '', menus)
menus<-read.csv(textConnection(menus)) #this takes a minute...
submenus<-menus[,3:51] #leave 'Restuarant', 'Food Category', and 'Menu Item ID' untouched.
submenus[]<-lapply(submenus, as.character)
menus[,3:51]<-submenus
submenus<-menus[,c(7:15, 29:51)]
submenus[]<-lapply(submenus, as.numeric)
menus[,c(7:16, 20:51)]<-submenus
str(menus)
submenus<-menus[,c(7:15, 19:51)]
menus<-readLines('../Data/menustat-546cf6b433804.csv')
menus<-menus[-1]
menus<-gsub('\t-', '', menus)
menus<-gsub('\t', '', menus)
menus<-read.csv(textConnection(menus)) #this takes a minute...
submenus<-menus[,3:51] #leave 'Restuarant', 'Food Category', and 'Menu Item ID' untouched.
submenus[]<-lapply(submenus, as.character)
menus[,3:51]<-submenus
str(menius)
str(menus)
str(menus[,c(7:15)])
str(menus[,c(7:15, 19:51)])
submenus<-menus[,c(7:15, 19:51)]
submenus[]<-lapply(submenus, as.numeric)
menus[,c(7:15, 19:51)]<-submenus
lm(menus$Calories.2014.~menus$Protein..g..2014.)
lm(menus$Calories.2014.~menus$Protein..g..2014.+menus$Total.Fat..g..2014.+menus$Carbohydrates..g..2014.)
summary(lm(menus$Calories.2014.~menus$Protein..g..2014.+menus$Total.Fat..g..2014.+menus$Carbohydrates..g..2014.))
library(reshape2)
names(menus)
a<-melt(menus, id.vars = c('Restaurant.', 'Food.Category.', 'Item-Name.', 'Menu_Item_ID'))
a<-melt(menus, id.vars = c('Restaurant.', 'Food.Category.', 'Item_Name.', 'Menu_Item_ID'))
head(a)
table(a$variable)
substring(a$variable, nchar(a$variable)-5, nchar$a$variable))
substring(a$variable, nchar(a$variable)-5, nchar(a$variable))
substring(as.character(a$variable), nchar(a$variable)-5, nchar(a$variable))
getwd()
