0))
y.obs <- get.outcome(df1, df.preds, 1)
df1<-cbind(y.obs, df1)
df1$group<-factor(df1$group, labels = c('Nonstigmatized', 'Stigmatized'))
df1$cond<-factor(df1$cond, labels=c('Control', 'Treatment'))
b<-lm(y.obs~cov+group*cond, dat=df1)
adjustedmeans <- effect('group*cond', b)
unadjustedmeans <- tapply(df1$y.obs, list(df1$group, df1$cond), mean)
cov.means <- tapply(df1$cov, list(df1$group, df1$cond), mean)
results.mat[i, 4:8] <- b$coefficients
results.mat[i, 9:13] <- summary(b)$coefficients[c(1,2,3,4,5),4]
means.mat[i, 4:15] <- c(unadjustedmeans[1:4], adjustedmeans$fit,
cov.means[1:4])
}
df <- as.data.frame(cbind(run=seq(1:10000),results.mat))
coefs <- melt(df, id.vars=c('run', 'slope', 'groups'),
measure.vars=c('intercept', 'cov', 'group', 'cond', 'group:cond'))
ggplot(coefs, aes(x=value, group=as.factor(slope),
color=as.factor(slope))) +
geom_density() + facet_grid(variable~groups, scales='free') + theme_bw()
### there's something fishy here. Running this simulation should return values of zero, but they're biased by .06 or so. I suspect that the interaction term of .25 is getting distributed across the other parameters
options(contrasts = c('contr.treatment','contr.poly'))
#options(contrasts = c('contr.sum','contr.poly'))
slope <- sample(rep(c(0, .5, 1), len=10000))
groups <- sample(rep(c(.25, .5, .75), len=10000))
condition <- sample(rep(c(.5), len=10000))
results.mat <- as.matrix(cbind(slope, groups, condition, matrix(0, 10000, 10)))
colnames(results.mat) <- c('slope', 'groups', 'condition', 'intercept', 'cov',
'group', 'cond', 'group:cond', 'p.intercept',
'p.cov', 'p.group', 'p.cond', 'p.group:cond')
means.mat <- as.matrix(cbind(slope, groups, condition, matrix(0, 10000, 12)))
colnames(means.mat) <- c('slope', 'groups', 'conditon',
'Nonstig.C.unadj', 'Stig.C.unadj',
'Nonstig.T.unadj', 'Stig.T.unadj',
'Nonstig.C.adj', 'Stig.C.adj',
'Nonstig.T.adj', 'Stig.T.adj',
'Nonstig.C.cov', 'Stig.C.cov',
'Nonstig.T.cov', 'Stig.T.cov')
for(i in 1:10000){
n <- 100
a <- cor.mat(c(-.25,0,0))
X <- as.data.frame(mvrnorm(n=n, mu=c(0,0,0), Sigma=a))
p <- list(group = groups[i], condition = .5)
X[,2] <- mycut(X[,2], c(0, 1-p$group, 1))-1
X[,3] <- mycut(X[,3], c(0, 1-p$condition, 1))-1
df1<-model.mat(X)
df.preds <- data.frame(effect=c('cov', 'group', 'cond',
'cov*group', 'cov*cond', 'group*cond',
'cov*group*cond'),
value=c(1,0,0,
slope[i],0,.25,
0))
y.obs <- get.outcome(df1, df.preds, 1)
df1<-cbind(y.obs, df1)
df1$group<-factor(df1$group, labels = c('Nonstigmatized', 'Stigmatized'))
df1$cond<-factor(df1$cond, labels=c('Control', 'Treatment'))
b<-lm(y.obs~cov+group*cond, dat=df1)
adjustedmeans <- effect('group*cond', b)
unadjustedmeans <- tapply(df1$y.obs, list(df1$group, df1$cond), mean)
cov.means <- tapply(df1$cov, list(df1$group, df1$cond), mean)
results.mat[i, 4:8] <- b$coefficients
results.mat[i, 9:13] <- summary(b)$coefficients[c(1,2,3,4,5),4]
means.mat[i, 4:15] <- c(unadjustedmeans[1:4], adjustedmeans$fit,
cov.means[1:4])
}
df <- as.data.frame(cbind(run=seq(1:10000),results.mat))
coefs <- melt(df, id.vars=c('run', 'slope', 'groups'),
measure.vars=c('intercept', 'cov', 'group', 'cond', 'group:cond'))
ggplot(coefs, aes(x=value, group=as.factor(slope),
color=as.factor(slope))) +
geom_density() + facet_grid(variable~groups, scales='free') + theme_bw()
library(dplyr)
df <- as.data.frame(cbind(run=seq(1:10000),results.mat))
df.pvals <- melt(df, id.vars=c('run', 'slope', 'groups'),
measure.vars = c('p.group'))
df.pvals <- df.pvals %>%
group_by(slope, groups, variable) %>%
mutate(propsig=sum(value<.05)/length(value)) %>%
ungroup
ggplot(df.pvals, aes(x=as.factor(slope), y=propsig, group=as.factor(groups),
color=as.factor(groups))) +
geom_point() + geom_line() +
facet_wrap(~variable) +
scale_y_continuous(limits=c(0, .3)) +
geom_hline(aes(yintercept=.05)) +
theme_bw()
library(dplyr)
df <- as.data.frame(cbind(run=seq(1:10000),results.mat))
df.pvals <- melt(df, id.vars=c('run', 'slope', 'groups'),
measure.vars = c('p.group'))
df.pvals <- df.pvals %>%
group_by(slope, groups, variable) %>%
mutate(propsig=sum(value<.05)/length(value)) %>%
ungroup
ggplot(df.pvals, aes(x=as.factor(slope), y=propsig, group=as.factor(groups),
color=as.factor(groups))) +
geom_point() + geom_line() +
facet_wrap(~variable) +
scale_y_continuous(limits=c(0, .25)) +
geom_hline(aes(yintercept=.05)) +
theme_bw()
library(dplyr)
df <- as.data.frame(cbind(run=seq(1:10000),results.mat))
df.pvals <- melt(df, id.vars=c('run', 'slope', 'groups'),
measure.vars = c('p.cond'))
df.pvals <- df.pvals %>%
group_by(slope, groups, variable) %>%
mutate(propsig=sum(value<.05)/length(value)) %>%
ungroup
ggplot(df.pvals, aes(x=as.factor(slope), y=propsig, group=as.factor(groups),
color=as.factor(groups))) +
geom_point() + geom_line() +
facet_wrap(~variable) +
scale_y_continuous(limits=c(0, .25)) +
geom_hline(aes(yintercept=.05)) +
theme_bw()
library(dplyr)
df <- as.data.frame(cbind(run=seq(1:10000),results.mat))
df.pvals <- melt(df, id.vars=c('run', 'slope', 'groups'),
measure.vars = c('p.group:cond'))
df.pvals <- df.pvals %>%
group_by(slope, groups, variable) %>%
mutate(propsig=sum(value<.05)/length(value)) %>%
ungroup
ggplot(df.pvals, aes(x=as.factor(slope), y=propsig, group=as.factor(groups),
color=as.factor(groups))) +
geom_point() + geom_line() +
facet_wrap(~variable) +
scale_y_continuous(limits=c(0, .25)) +
geom_hline(aes(yintercept=.05)) +
theme_bw()
library(dplyr)
df <- as.data.frame(cbind(run=seq(1:10000),results.mat))
df.pvals <- melt(df, id.vars=c('run', 'slope', 'groups'),
measure.vars = c('p.group'))
df.pvals <- df.pvals %>%
group_by(slope, groups, variable) %>%
mutate(propsig=sum(value<.05)/length(value)) %>%
ungroup
ggplot(df.pvals, aes(x=as.factor(slope), y=propsig, group=as.factor(groups),
color=as.factor(groups))) +
geom_point() + geom_line() +
facet_wrap(~variable) +
scale_y_continuous(limits=c(0, .25)) +
geom_hline(aes(yintercept=.05)) +
theme_bw()
install.packages('rstan', dependencies=T)
library(rstan)
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = '8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
schools_dat <- list(J = 8,
y = c(28,  8, -3,  7, -1,  1, 18, 12),
sigma = c(15, 10, 16, 11,  9, 11, 10, 18))
fit <- stan(file = 'Desktop/8schools.stan', data = schools_dat,
iter = 1000, chains = 4)
print (fit)
print(fit)
plot(fit)
pairs(fit, pars = c("mu", "tau", "lp__"))
la <- extract(fit, permuted = TRUE) # return a list of arrays
mu <- la$mu
a <- extract(fit, permuted = FALSE)
a2 <- as.array(fit)
m <- as.matrix(fit)
print(fit, digits = 1)
50/3
sqrt(16.66)
library(compiler)
library(corpcor)
library(MASS)
set.seed(42)
VCV <- matrix(c(1, 0, .2,
0, 1, .7,
.2, .7, 1), nrow=3, ncol=3)
rownames(VCV) <- c('X1', 'X2', 'X3')
dat <- as.data.frame(mvrnorm(n = n, mu = rep(0, 3), Sigma = VCV))
n <- 100
VCV <- matrix(c(1, 0, .2,
0, 1, .7,
.2, .7, 1), nrow=3, ncol=3)
rownames(VCV) <- c('X1', 'X2', 'X3')
dat <- as.data.frame(mvrnorm(n = n, mu = rep(0, 3), Sigma = VCV))
params <- c(.5, 2, -1.5)
dat
dat$y <- rnorm(n=dim(dat)[1], mean=(1 + as.matrix(dat) %*% params), 5)
dat
library(compiler)
library(corpcor)
library(MASS)
set.seed(42)
gen.data <- cmpfun(function(n, cor)){
#correlations between predictors
VCV <- matrix(c(1, 0, 0,
0, 1, cor,
0, cor, 1), nrow=3, ncol=3)
rownames(VCV) <- c('X1', 'X2', 'X3')
dat <- as.data.frame(mvrnorm(n = n, mu = rep(0, 3), Sigma = VCV))
params <- c(.5, 2, -1.5)
dat$y <- rnorm(n=dim(dat)[1], mean=(1 + as.matrix(dat) %*% params), 5)
return(dat)
}
gen.data <- cmpfun(function(n, cor)){
gen.data <- function(n, cor){
#correlations between predictors
VCV <- matrix(c(1, 0, 0,
0, 1, cor,
0, cor, 1), nrow=3, ncol=3)
rownames(VCV) <- c('X1', 'X2', 'X3')
dat <- as.data.frame(mvrnorm(n = n, mu = rep(0, 3), Sigma = VCV))
params <- c(.5, 2, -1.5)
dat$y <- rnorm(n=dim(dat)[1], mean=(1 + as.matrix(dat) %*% params), 5)
return(dat)
}
df<-gen.data(100, .3)
lm(df$y ~ df$X1 + df$X2 + df$X3)
correlations <- sample(rep(c(0, .5), each=500))
mod <- lm(df$y ~ df$X1 + df$X2 + df$X3)
mod
summary(mod)
summary(mod)[1:4]
summary(mod)$coefficients
summary(mod)$coefficients[1:4]
summary(mod)$coefficients[1:8]
summary(mod)$coefficients[c(1:8, 13:16]
summary(mod)$coefficients[c(1:8, 13:16)]
correlations <- sample(rep(c(0, .5), each=500))
results.mat <- as.matrix(cbind(run=1:1000, correlations, matrix(0, 1000, 14)))
colnames(results.mat) <- c('run', 'cor', 'Int', 'X1', 'X2', 'X3',
'Int.se', 'X1.se', 'X2.se', 'X3.se',
'Int.p', 'X1.p', 'X2.p', 'X3.')
for(i in 1:1000){
df <- gen.data(100, correlations[i])
mod <- lm(df$y ~ df$X1 + df$X2 + df$X3)
results.mat[,3:14] <- summary(mod)$coefficients[c(1:8, 13:16)]
}
results.mat <- as.matrix(cbind(run=1:1000, correlations, matrix(0, 1000, 12)))
colnames(results.mat) <- c('run', 'cor', 'Int', 'X1', 'X2', 'X3',
'Int.se', 'X1.se', 'X2.se', 'X3.se',
'Int.p', 'X1.p', 'X2.p', 'X3.')
for(i in 1:1000){
df <- gen.data(100, correlations[i])
mod <- lm(df$y ~ df$X1 + df$X2 + df$X3)
results.mat[,3:14] <- summary(mod)$coefficients[c(1:8, 13:16)]
}
head(results.mat)
mean(results.mat['Int'])
mean(results.mat[,'Int'])
mean(results.mat[,'X1'])
mean(results.mat[,'X2'])
mean(results.mat[,1])
mean(results.mat[,2])
mean(results.mat[,3])
mean(results.mat[,4])
mean(results.mat[,5])
mean(results.mat[,6])
mod
summary(mod)
summary(mod)$coefficients
summary(mod)$coefficients[c(1:8, 13:16)]
results.mat
dim(results.mat)
summary(mod)$coefficients[c(1:8, 13:16)]
head(results.mat)
gen.data <- function(n, cor){
#correlations between predictors
VCV <- matrix(c(1, 0, 0,
0, 1, cor,
0, cor, 1), nrow=3, ncol=3)
rownames(VCV) <- c('X1', 'X2', 'X3')
dat <- as.data.frame(mvrnorm(n = n, mu = rep(0, 3), Sigma = VCV))
params <- c(.5, 2, -1.5)
dat$y <- rnorm(n=dim(dat)[1], mean=(1 + as.matrix(dat) %*% params), 5)
return(dat)
}
correlations <- sample(rep(c(0, .5), each=500))
results.mat <- as.matrix(cbind(run=1:1000, correlations, matrix(0, 1000, 12)))
colnames(results.mat) <- c('run', 'cor', 'Int', 'X1', 'X2', 'X3',
'Int.se', 'X1.se', 'X2.se', 'X3.se',
'Int.p', 'X1.p', 'X2.p', 'X3.p')
head(results.mat)
for(i in 1:1000){
df <- gen.data(100, correlations[i])
mod <- lm(df$y ~ df$X1 + df$X2 + df$X3)
results.mat[i,3:14] <- summary(mod)$coefficients[c(1:8, 13:16)]
}
mean(results.mat[,6])
mean(results.mat[,3])
mean(results.mat[,4])
mean(results.mat[,5])
mean(results.mat[,6])
mean(results.mat[,7])
mean(results.mat[,8])
mean(results.mat[,9])
mean(results.mat[,10])
mean(results.mat[,11])
mean(results.mat[,12])
mean(results.mat[,13])
mean(results.mat[,14])
?melt
library(reshape2)
?melt
melt.array(results.mat)
melt(results.mat)
coefs <- melt(results.mat, id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
table(coefs$Var1)
table(coefs$Var2)
coefs <- melt(results.mat, id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
coefs <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
head(coefs)
table(coefs$variable)
library(MASS)
library(reshape2)
set.seed(42)
gen.data <- function(n, cor){
#correlations between predictors
VCV <- matrix(c(1, 0, 0,
0, 1, cor,
0, cor, 1), nrow=3, ncol=3)
rownames(VCV) <- c('X1', 'X2', 'X3')
dat <- as.data.frame(mvrnorm(n = n, mu = rep(0, 3), Sigma = VCV))
params <- c(1, 1, 1)
dat$y <- rnorm(n=dim(dat)[1], mean=(1 + as.matrix(dat) %*% params), 5)
return(dat)
}
df<-gen.data(100, .3)
lm(df$y ~ df$X1 + df$X2 + df$X3)
correlations <- sample(rep(c(0, .5), each=500))
results.mat <- as.matrix(cbind(run=1:1000, correlations, matrix(0, 1000, 12)))
colnames(results.mat) <- c('run', 'cor', 'Int', 'X1', 'X2', 'X3',
'Int.se', 'X1.se', 'X2.se', 'X3.se',
'Int.p', 'X1.p', 'X2.p', 'X3.p')
for(i in 1:1000){
df <- gen.data(100, correlations[i])
mod <- lm(df$y ~ df$X1 + df$X2 + df$X3)
results.mat[i,3:14] <- summary(mod)$coefficients[c(1:8, 13:16)]
}
coefs <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
se <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int.se', 'X1.se', 'X2.se', 'X3.se'))
pvals <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int.p', 'X1.p', 'X2.p', 'X3.p'))
pvals
library(ggplot2)
names(coefs)
ggplot(coefs, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point') +
stat_summary(fun.data=mean_cl_boot, geom='errorbar')
coefs$cor <- factor(coefs$cor, labels = 'uncorrelated', 'correlated')
ggplot(coefs, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point') +
stat_summary(fun.data=mean_cl_boot, geom='errorbar')
head(coefs)
coefs <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
head(coefs)
coefs$cor <- factor(coefs$cor, labels = 'uncorrelated', 'correlated')
head(coefs)
coefs <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
coefs$cor <- factor(coefs$cor, labels = c('uncorrelated', 'correlated'))
head(coefs)
ggplot(coefs, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5))
for(i in 1:5000){
df <- gen.data(100, correlations[i])
mod <- lm(df$y ~ df$X1 + df$X2 + df$X3)
results.mat[i,3:14] <- summary(mod)$coefficients[c(1:8, 13:16)]
}
tail(coefs)
correlations <- sample(rep(c(0, .5), each=2500))
results.mat <- as.matrix(cbind(run=1:5000, correlations, matrix(0, 5000, 12)))
colnames(results.mat) <- c('run', 'cor', 'Int', 'X1', 'X2', 'X3',
'Int.se', 'X1.se', 'X2.se', 'X3.se',
'Int.p', 'X1.p', 'X2.p', 'X3.p')
for(i in 1:5000){
df <- gen.data(100, correlations[i])
mod <- lm(df$y ~ df$X1 + df$X2 + df$X3)
results.mat[i,3:14] <- summary(mod)$coefficients[c(1:8, 13:16)]
}
coefs <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
coefs$cor <- factor(coefs$cor, labels = c('uncorrelated', 'correlated'))
ggplot(coefs, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5))
se$cor <- factor(coefs$cor, labels = c('uncorrelated', 'correlated'))
se <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int.se', 'X1.se', 'X2.se', 'X3.se'))
coefs <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int', 'X1', 'X2', 'X3'))
se <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int.se', 'X1.se', 'X2.se', 'X3.se'))
se$cor <- factor(coefs$cor, labels = c('uncorrelated', 'correlated'))
se <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int.se', 'X1.se', 'X2.se', 'X3.se'))
se$cor <- factor(se$cor, labels = c('uncorrelated', 'correlated'))
ggplot(se, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5))
pvals <- melt(as.data.frame(results.mat), id.vars=c('run', 'cor'),
measure.vars=c('Int.p', 'X1.p', 'X2.p', 'X3.p'))
pvals$cor <- factor(pvals$cor, labels = c('uncorrelated', 'correlated'))
ggplot(pvals, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5))
lm(coefs$value~coefs$cor+coefs$variable)
summary(lm(coefs$value~coefs$cor+coefs$variable))
summary(lm(coefs$value~coefs$cor*coefs$variable))
ggplot(coefs, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5)) +
scale_color_manual(values=c('#144256', '#88301B'))
coefs$cor <- factor(coefs$cor, labels = c('uncorrelated', 'correlated'))
ggplot(coefs, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5)) +
scale_color_manual(values=c('#144256', '#88301B'))
ggplot(coefs, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5)) +
scale_color_manual(values=c('#144256', '#88301B')) +
theme_bw()
se$cor <- factor(se$cor, labels = c('uncorrelated', 'correlated'))
ggplot(se, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5)) +
scale_color_manual(values=c('#144256', '#88301B')) +
theme_bw()
pvals$cor <- factor(pvals$cor, labels = c('uncorrelated', 'correlated'))
ggplot(pvals, aes(x=variable, y=value, color=cor, group=cor)) +
stat_summary(fun.y=mean, geom='point', position=position_dodge(.5)) +
stat_summary(fun.data=mean_cl_boot, geom='errorbar',
position=position_dodge(.5)) +
scale_color_manual(values=c('#144256', '#88301B')) +
theme_bw()
summary(lm(coefs$value~coefs$cor*coefs$variable))
summary(lm(se$value~se$cor*se$variable))
summary(lm(coefs$value~coefs$cor*coefs$variable, subset=coefs$variable!='Int'))
summary(lm(se$value~se$cor*se$variable, subset=coefs$variable!='Int.se'))
head(pvals)
summary(lm(pvals$value~pvals$cor*pvals$variable, subset=coefs$variable!='Int.p'))
summary(lm(pvals$value~pvals$cor*pvals$variable, subset=pvals$variable!='Int.p'))
library(stargazer)
?"stargazer
""
""
?"stargazer"
stargazer(summary(lm(coefs$value~coefs$cor*coefs$variable, subset=coefs$variable!='Int')))
stargazer(summary(lm(coefs$value~coefs$cor*coefs$variable, subset=coefs$variable!='Int')))
stargazer(lm(coefs$value~coefs$cor*coefs$variable, subset=coefs$variable!='Int'))
stargazer(lm(coefs$value~coefs$cor*coefs$variable, subset=coefs$variable!='Int'), type='text')
stargazer(lm(coefs$value~coefs$cor*coefs$variable, subset=coefs$variable!='Int'), type='text')
stargazer(lm(se$value~se$cor*se$variable, subset=coefs$variable!='Int.se'), type='text')
stargazer(lm(pvals$value~pvals$cor*pvals$variable, subset=pvals$variable!='Int.p'), type='text)
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("../figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
print(paste0("../_posts/", sub(".Rmd$", "", basename(input)), ".md"))
knit(input, output = paste0("../_posts/", sub(".Rmd$", "", basename(input)), ".md"), envir = parent.frame())
}
)
)
sdf
}
.
''
}
)))
l
sdf
asd
fas
dfgb
f
))))
}}}}}
''
KnitPost <- function(input, base.url = "/") {
require(knitr)
opts_knit$set(base.url = base.url)
fig.path <- paste0("../figs/", sub(".Rmd$", "", basename(input)), "/")
opts_chunk$set(fig.path = fig.path)
opts_chunk$set(fig.cap = "center")
render_jekyll()
print(paste0("../_posts/", sub(".Rmd$", "", basename(input)), ".md"))
knit(input, output = paste0("../_posts/", sub(".Rmd$", "", basename(input)), ".md"), envir = parent.frame())
}
KnitPost('Documents/Gits/riddlet.github.io/_drafts/_posts/simulation for answers.Rmd')
setwd("~/Documents/Gits/riddlet.github.io/_drafts/_posts")
KnitPost('simulation for answers.Rmd')
